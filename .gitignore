from datetime import datetime

from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from marshmallow_sqlalchemy import SQLAlchemyAutoSchema

app = Flask(__name__)

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'    #Estamos salvando as modificações em nossa database 
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False        #Aqui desabilitamos as modificações para não serem salvas no banco

db = SQLAlchemy(app)


class Music(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(120), unique=False, nullable=False)
    duracao = db.Column(db.Integer, nullable=False)
    generos_id = db.Column(db.Integer, nullable=False)
    lancamento = db.Column(db.String, nullable=False)
    created = db.Column(db.DateTime, default=datetime.utcnow)
    modified = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    def __init__(self,id, nome, duracao, generos_id, lancamento):
        self.id = id
        self.nome = nome
        self.duracao = duracao
        self.generos_id = generos_id
        self.lancamento = lancamento

class MusicSchema(SQLAlchemyAutoSchema):
    class Meta:
        model = Music
        include_fk = True
        load_instance = True

music_schema = MusicSchema()
music_schemas = MusicSchema(many=True)

class Artist(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(120), unique=False, nullable=False)
    gravadoras_id = db.Column(db.Integer, nullable=False)
    created = db.Column(db.DateTime, default=datetime.utcnow)
    modified = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    def __init__(self,id, nome, gravadoras_id):
        self.id = id
        self.nome = nome
        self.gravadoras_id = gravadoras_id

class ArtistSchema(SQLAlchemyAutoSchema):
    class Meta:
        model = Artist
        include_fk = True
        load_instance = True

artist_schema = ArtistSchema()
artist_schemas = ArtistSchema(many=True)

class Genero(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    descricao = db.Column(db.String(120), unique=False, nullable=False)
    created = db.Column(db.DateTime, default=datetime.utcnow)
    modified = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    def __init__(self,id, descricao):
        self.id = id
        self.descricao = descricao

class GeneroSchema(SQLAlchemyAutoSchema):
    class Meta:
        model = Genero
        include_fk = True
        load_instance = True

genero_schema = GeneroSchema()
genero_schemas = GeneroSchema(many=True)

class Gravadora(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(120), unique=False, nullable=False)
    valor = db.Column(db.Integer, nullable=False)
    vencimento = db.Column(db.String, nullable=False)
    created = db.Column(db.DateTime, default=datetime.utcnow)
    modified = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    def __init__(self,id, nome, valor, vencimento):
        self.id = id
        self.nome = nome
        self.valor = valor
        self.vencimento = vencimento


class GravadoraSchema(SQLAlchemyAutoSchema):
    class Meta:
        model = Gravadora
        include_fk = True
        load_instance = True


gravadora_schema = GravadoraSchema()
gravadora_schemas = GravadoraSchema(many=True)

class Cliente(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    login = db.Column(db.String(45), unique=True, nullable=False)
    senha = db.Column(db.String(45), nullable=False)
    created = db.Column(db.DateTime, default=datetime.utcnow)
    modified = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    planos_id = db.Column(db.Integer, nullable=False)
    email = db.Column(db.String(50), nullable=False)

    def __init__(self,id, login, senha, planos_id, email):
        self.id = id
        self.login = login
        self.senha = senha
        self.planos_id = planos_id
        self.email = email

class ClienteSchema(SQLAlchemyAutoSchema):
    class Meta:
        model = Cliente
        include_fk = True
        load_instance = True

cliente_schema = ClienteSchema()
cliente_schemas = ClienteSchema(many=True)

class Plano(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    descricao = db.Column(db.String(45), unique=False, nullable=False)
    valor = db.Column(db.Float(precision=2), nullable=False)
    limite = db.Column(db.Integer, nullable=False)
    created = db.Column(db.DateTime, default=datetime.utcnow)
    modified = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    def __init__(self,id descricao, valor, limite):
        self.id = id
        self.descricao = descricao
        self.valor = valor
        self.limite = limite

class PlanoSchema(SQLAlchemyAutoSchema):
    class Meta:
        model = Plano
        include_fk = True
        load_instance = True

plano_schema = PlanoSchema()
plano_schemas = PlanoSchema(many=True)

class Pagamento(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    data = db.Column(db.DateTime, default=datetime.utcnow)

    def __init__(self,id):
        self.id = id

class PagamentoSchema(SQLAlchemyAutoSchema):
    class Meta:
        model = Pagamento
        include_fk = True
        load_instance = True

pagamento_schema = PagamentoSchema()
pagamento_schemas = PagamentoSchema(many=True)


with app.app_context():
    db.create_all()


@app.route("/api/musicas/", methods=['GET', 'POST'])
def musicas():
    if request.method == 'GET':
        all_music = Music.query.all()

        return jsonify(music_schemas.dump(all_music))
    elif request.method == 'POST':
        new_music = request.get_json()
        music = Music(new_music['id'], new_music['nome'], new_music['duracao'], new_music['generos_id'], new_music['lancamento'])

        db.session.add(music)
        db.session.commit()

        return jsonify({'message': 'Música criada com sucesso!'}), 201


@app.route("/api/musicas/<int:music_id>", methods=['GET', 'PATCH', 'DELETE'])
def musicas_by_id(music_id):
    if request.method == 'GET':
        music = Music.query.get(music_id)

        if music is None:
            return jsonify({'message': 'Música não encontrada!'}), 404

        return jsonify(music_schema.dump(music))
    elif request.method == 'PATCH':
        music = Music.query.get(music_id)

        if music is None:
            return jsonify({'message': 'Música não encontrada para atualização!'}), 404

        update_data = request.get_json()

        music.nome = update_data.get('nome', music.nome)
        music.duracao = update_data.get('duracao', music.duracao)
        music.generos_id = update_data.get('generos_id', music.generos_id)
        music.lancamento = update_data.get('lancamento', music.lancamento)

        db.session.commit()

        return jsonify({'message': 'Música atualizada com sucesso!'})
    elif request.method == 'DELETE':
        music = Music.query.get(music_id)

        if music is None:
            return jsonify({'message': 'Música não encontrada para deletar!'}), 404

        db.session.delete(music)
        db.session.commit()

        return jsonify({'message': 'Música deletada com sucesso!'}), 204


@app.route("/api/artistas/", methods=['GET', 'POST'])
def artistas():
    if request.method == 'GET':
        all_artist = Artist.query.all()

        return jsonify(artist_schemas.dump(all_artist))
    elif request.method == 'POST':
        new_artist = request.get_json()
        artist = Artist(new_artist['nome'], new_artist['gravadoras_id'])

        db.session.add(artist)
        db.session.commit()

        return jsonify({'message': 'Artista criado com sucesso!'}), 201


@app.route("/api/artistas/<int:artist_id>", methods=['GET', 'PATCH', 'DELETE'])
def artistas_by_id(artist_id):
    if request.method == 'GET':
        artist = Artist.query.get(artist_id)

        if artist is None:
            return jsonify({'message': 'Artista não encontrado!'}), 404

        return jsonify(artist_schema.dump(artist))
    elif request.method == 'PATCH':
        artist = Artist.query.get(artist_id)

        if artist is None:
            return jsonify({'message': 'Artista não encontrado para atualização!'}), 404

        update_data = request.get_json()

        artist.nome = update_data.get('nome', artist.nome)
        artist.gravadoras_id = update_data.get('gravadoras_id', artist.gravadoras_id)

        db.session.commit()

        return jsonify({'message': 'Artista atualizado com sucesso!'})
    elif request.method == 'DELETE':
        artist = Artist.query.get(artist_id)

        if artist is None:
            return jsonify({'message': 'Artista não encontrado para deletar!'}), 404

        db.session.delete(artist)
        db.session.commit()

        return jsonify({'message': 'Artista deletado com sucesso!'}), 204
